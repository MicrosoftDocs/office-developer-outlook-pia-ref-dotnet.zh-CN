<Type Name="_Items" FullName="Microsoft.Office.Interop.Outlook._Items">
  <Metadata><Meta Name="ms.openlocfilehash" Value="90ccbcb3fe07f548327e1919c5fa54fecbde32ba" /><Meta Name="ms.sourcegitcommit" Value="9e48edef9d279c87fa2fbd78f150bc92c2332179" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="04/13/2021" /><Meta Name="ms.locfileid" Value="51691747" /></Metadata><TypeSignature Language="C#" Value="public interface _Items : System.Collections.IEnumerable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract _Items implements class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Interop.Outlook._Items" />
  <TypeSignature Language="VB.NET" Value="Public Interface _Items&#xA;Implements IEnumerable" />
  <TypeSignature Language="C++ CLI" Value="public interface class _Items : System::Collections::IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("00063041-0000-0000-C000-000000000046")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibType(4160)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>这是 COM coclass（托管代码需要此 Coclass 来实现与相应的 COM 对象的互操作性）中的主接口。 仅当您想要使用的方法与 COM 对象的事件共享同一名称时才使用此主接口；在这种情况下，转换为此接口以调用该方法，转换为最新的事件接口以连接到该事件。 否则，请使用派生自 COM coclass 的 .NET 接口来访问方法、属性和 COM 对象的事件。 有关 COM 对象的信息，请参阅 <see cref="T:Microsoft.Office.Interop.Outlook.Items" /> 。</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public object Add (object Type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Add([in]object Type) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Outlook._Items.Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (Optional Type As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(95)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Type" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Type">新项 Outlook 项目类型。 指定 要 <see cref="P:Microsoft.Office.Interop.Outlook._MailItem.MessageClass" /> 创建自定义窗体的 。 可以是下列的 <b>OlItemType</b> 常量之一: <b>olAppointmentItem</b> 、 <b>olContactItem</b> 、 <b>olJournalItem</b> 、 <b>olMailItem</b> 、 <b>olNoteItem</b> 、 <b>olPostItem</b> ，或 <b>olTaskItem，</b> 或任何有效的邮件类。</param>
        <summary>在集合中为文件夹创建新的 Outlook <see cref="T:Microsoft.Office.Interop.Outlook.Items" /> 项目。</summary>
        <returns>一个代表新 Outlook 项目的 Object 值。</returns>
        <remarks><para>如果未指定，则 Outlook 项目的 <b>Type</b> 属性默认为文件夹的类型，如果未键入父文件夹，则默认为 <see cref="T:Microsoft.Office.Interop.Outlook.MailItem" /> 。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Application">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Outlook.Application Application { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Outlook.Application Application" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Outlook._Items.Application" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Application As Application" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Outlook::Application ^ Application { Microsoft::Office::Interop::Outlook::Application ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(61440)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(61440)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Outlook.Application</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回 <see cref="T:Microsoft.Office.Interop.Outlook.Application" />  一个对象，该对象代表对象的父 Outlook 应用程序。 只读。</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Class">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Outlook.OlObjectClass Class { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Outlook.OlObjectClass Class" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Outlook._Items.Class" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Class As OlObjectClass" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Outlook::OlObjectClass Class { Microsoft::Office::Interop::Outlook::OlObjectClass get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(61450)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(61450)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Outlook.OlObjectClass</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回 <see cref="T:Microsoft.Office.Interop.Outlook.OlObjectClass" /> 一个常量，该常量指示对象的类。 只读。</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Outlook._Items.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(80)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(80)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回一<b> (</b><b>整数</b>C#) 整数值，该值指示指定集合中的对象数。 只读。</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public object Find (string Filter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Find([in]string Filter) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Outlook._Items.Find(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (Filter As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Find(System::String ^ Filter);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(98)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Filter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Filter">一个字符串，它指定所返回的对象必须满足的条件。</param>
        <summary>查找并返回一个满足给定 的 Outlook 项目对象 <paramref name="Filter" /> 。</summary>
        <returns>一个 Object 值，表示调用成功时 Outlook 项目;如果 <b>返回 (，</b> 则返回 Nothing (中 Nothing Visual Basic) C#) 中返回 Nothing。</returns>
        <remarks><para>若要在集合中使用内容索引 <see cref="T:Microsoft.Office.Interop.Outlook.Items" /> 搜索，请使用 <see cref="M:Microsoft.Office.Interop.Outlook._Items.Restrict(System.String)" /> 方法。 <b>如果包含内容索引关键字，FindRow</b> <paramref name="Filter" /> 将返回错误。 有关内容索引关键字详细信息，请参阅使用查询关键字 <a href="http://go.microsoft.com/fwlink/?LinkId=87947">筛选项目</a></para>
          <para>方法将在 中返回具有以下属性的错误 <paramref name="Filter" /> ： </para>
          <list type="table">
            <item>
              <description>BodyCategoriesChildrenClassCompaniesCompanyLastFirstNoSpaceCompanyLastFirstSpaceOnlyContactNamesContactsConversationIndexDLNameEmail1EntryIDEmail2EntryIDEmail3EntryIDEntryIDHTMLBodyIsOnlineMeetingLastFirstAndSuffixLastFirstNoSpaceAutoResolvedWinnerBodyFormatInternetCodePagePermission</description>
              <description>LastFirstNoSpaceCompanyLastFirstSpaceOnlyLastFirstSpaceOnlyCompanyLastFirstNoSpaceAndSuffixMemberCountNetMeetingAliasNetMeetingAutoStartNetMeetingOrganizerAliasNetMeetingServerNetMeetingTypeRecurrenceStateReplyRecipientsReceivedByEntryIDRecevedOnBehalfOfEntryIDResponseStateSavedSentSubmittedVotingOptionsDownloadStateIsConflictMeetingWorkspaceURL</description>
            </item>
          </list>
          <para>创建 Find 方法和 Restrict 方法的筛选器</para>
          <para>根据要筛选的字段类型，筛选器的语法将有所不同。</para>
          <para>字符串（适用于文本字段） </para>
          <para>搜索 Text 字段时，可以使用撇号 (') 或双引号 ("") 来分隔作为筛选器一部分的值。 例如，当字段的类型为<b>String</b>时，以下所有行 (<b>字符串C#) ：</b> </para>
          <para>sFilter = "[CompanyName] = 'Microsoft'" </para>
          <para>sFilter = "[CompanyName] = ""Microsoft""" </para>
          <para>sFilter = "[CompanyName] = " &amp; Chr (34 &amp;) Microsoft" &amp; Chr (34) </para>
          <para>在 Jet 或 DASL 查询中指定筛选器的过程中，如果使用一对单引号来分隔构成筛选器的字符串，而且该字符串包含另一个单引号或撇号，则应在这个单引号或撇号前面添加一个单引号以用作转义符。如果使用一对双引号来分隔字符串，则也可使用类似方法。如果该字符串包含一个双引号，则应在该双引号前面添加一个双引号以用作转义符。</para>
          <para>例如，在筛选 <b>Subject</b> 属性等于"不能"的 DASL 筛选器字符串中，整个筛选器字符串由一对双引号分隔，而嵌入字符串不能用一对单引号分隔。 需要在此筛选器字符串中转义三个字符：属性引用的起始双引号和结束双引号，以及单词的值条件中的撇号不能 http://schemas.microsoft.com/mapi/proptag/0x0037001f 。 通过应用适当的转义符，您可将筛选器字符串表示如下：</para>
          <para>filter = "@SQL="" http://schemas.microsoft.com/mapi/proptag/0x0037001f "" = 'can't'"</para>
          <para>或者，也可使用 chr(34) 函数来代表用作转义符的双引号（其 ASCII 字符值为 34）。 通过使用 chr(34) 代替双引号转义符，您可将上一个示例表示如下：</para>
          <para>filter = "@SQL= " &amp; Chr (34) &amp; " http://schemas.microsoft.com/mapi/proptag/0x0037001f " _</para>
          <para>    &amp; Chr (34) " &amp; = " &amp; "'can't'"</para>
          <para>对于使用 <b>ci_startswith</b> 或 <b>ci_phrasematch</b> 运算符的 DASL 查询而言，转义单引号和双引号字符也是必需的。 例如，以下查询可在邮件主题中执行针对 can't 的短语匹配查询： </para>
          <para>filter = "@SQL=" &amp; Chr (34) &amp; " http://schemas.microsoft.com/mapi/proptag/0x0037001E " _</para>
          <para>    &amp; Chr (34) " &amp; ci_phrasematch " &amp; "'can't'"</para>
          <para>另一个示例是一个 DASL 筛选器字符串，用于筛选 <b>Subject</b> 属性是否等于正确的单词，其中单词 stuff 用双引号括起来。 在此情况下，必须通过以下方式对括起的双引号进行转义：</para>
          <para>filter = "@SQL="" http://schemas.microsoft.com/mapi/proptag/0x0037001f "" = 'the right ""stuff""'"</para>
          <para>对于包含空格、单引号、双引号或百分号字符的命名属性，对这些属性的引用将应用一组不同的转义规则。 有关更多信息，请参阅按命名空间引用属性。</para>
          <para>日期</para>
          <para>尽管日期和时间通常以 Date 格式存储，但 Find 和 Restrict 方法要求将日期和时间转换为字符串表示形式。 为确保日期的格式满足 Microsoft Outlook 的要求，请使用 Format 函数。 以下示例创建了筛选器以查找所有在 1999 年 1 月 15 日下午 3:30 以后修改过的联系人。 </para>
          <para>sFilter = "[LastModificationTime] &gt; '" &amp; Format ("1/15/99 3：30pm"， "ddddd h：nn AMPM") &amp; "'"</para>
          <para>布尔运算符</para>
          <para>Boolean 运算符、TRUE/FALSE、YES/NO 和 ON/OFF 等都不应转换为字符串。例如，要确定是否已为联系人启用日记，可使用以下筛选器：</para>
          <para>sFilter = "[Journal] = True" </para>
          <para>
            <b>注意</b>：如果使用引号作为布尔字段的分隔符，则空字符串将查找其字段为 False 的项，所有非空字符串将查找其字段为 True 的项。</para>
          <para>关键字（或类别）</para>
          <para>"类别"字段的类型为关键字，旨在保留多个值。 如果以编程方式进行访问，类别字段的行为类似文本字段，且字符串必须完全匹配。 文本字符串中的值将通过逗号和空格分隔。 这通常意味着，当关键字字段包含多个值时，不能使用 Find 和 Restrict 方法对关键字字段进行操作。 例如，如果“商务”类别和“商务和社会”类别中各包含一个联系人，则无法轻松使用 Find 和 Restrict 方法检索“商务”类别中的所有项目。 但可循环遍历文件夹中的所有联系人，并使用 Instr 函数测试字符串“商务”是否包含在整个关键字字段中。 </para>
          <para>
            <b>注意</b>：如果将"类别"字段限制为两个值或较低的值数，则一个可能的例外。 然后，可以将 Find 和 Restrict 方法与 OR 逻辑运算符一起用于检索所有商务联系人。 例如（在伪代码中）：“商务” OR “商务, 个人” OR “个人, 商务”。 类别字符串不区分大小写。</para>
          <para>整数</para>
          <para>可以搜索 Integer 字段（带引号或不带引号）作为分隔符。 下列筛选器将查找使用 Outlook 2000 创建的联系人： </para>
          <para>sFilter = "[OutlookInternalVersion] = 92711" </para>
          <para>sFilter = "[OutlookInternalVersion] = '92711'"</para>
          <para>使用变量作为筛选器的一部分</para>
          <para>如 Restrict 方法示例所示，您可以使用变量中的值作为筛选器的一部分。 下面的 Microsoft Visual Basic示例演示了使用变量作为筛选器一部分的语法。 </para>
          <para>sFullName = "Dan Wilson" </para>
          <para> 此方法使用 Chr (34) 分隔值：sFilter = "[FullName] = " &amp; Chr (34) &amp; sFullName &amp; Chr (34)  </para>
          <para> 此方法使用双引号分隔值：sFilter = "[FullName] = """ &amp; sFullName &amp; """"</para>
          <para>使用逻辑运算符作为筛选器的一部分</para>
          <para>可以使用的逻辑运算符为 AND、OR 和 NOT。 以下是 Restrict 方法子句的变体，因此您可以指定多个条件。  </para>
          <para>OR：以下代码返回所有类别为“商务”或“个人”的联系人项目。 </para>
          <para>sFilter = "[Categories] = 'Personal' Or [Categories] = 'Business'" </para>
          <para>AND：以下代码检索所有工作单位为 Microsoft 的私人联系人。 </para>
          <para>sFilter = "[Categories] = 'Personal' and [CompanyName] = 'Microsoft'" </para>
          <para>NOT：以下代码检索所有工作单位不是 Microsoft 的私人联系人。 </para>
          <para>sFilter = "[Categories] = 'Personal' and Not ([CompanyName] = 'Microsoft') "</para>
          <para>其他注意事项</para>
          <para>如果试图将 Find 或 Restrict 方法用于用户定义的字段，则必须在文件夹中定义这些字段，否则将发生错误。 无法执行“包含”操作。 例如，不能使用 Find 和 Restrict 搜索“主题”字段中包含特定字词的项目。 而应使用 AdvancedSearch 方法，或循环遍历文件夹中的所有项目并使用 InStr 函数在字段内执行搜索操作。 可以使用 Restrict 方法搜索以特定范围内的字符开始的项目。 例如，若要搜索姓氏以字母 M 开头的所有联系人，请使用以下筛选器： </para>
          <para>sFilter = "[LastName] &gt; 'LZZZ' and [LastName] &lt; 'N'"</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FindNext">
      <MemberSignature Language="C#" Value="public object FindNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object FindNext() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Outlook._Items.FindNext" />
      <MemberSignature Language="VB.NET" Value="Public Function FindNext () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FindNext();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(99)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>该方法 <see cref="M:Microsoft.Office.Interop.Outlook._Items.Find(System.String)" />  运行后，此方法查找并返回指定集合中的下一个 Outlook 项目。</summary>
        <returns>一个代表在集合中找到的下一个 Outlook 项目的 Object 值。</returns>
        <remarks><para> 此搜索操作从当前位置，与以前用 <b>Find</b> 方法设置的表达式匹配开始。</para>
          <para>如果调用成功，此方法将返回 Outlook 项目对象;如果失败<b></b> (， (中返回 Nothing Visual Basic) Nothing C#) Nothing。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFirst">
      <MemberSignature Language="C#" Value="public object GetFirst ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetFirst() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Outlook._Items.GetFirst" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFirst () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetFirst();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(86)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回集合中的第一个对象。</summary>
        <returns>一个 Object 值，代表集合包含的第一个对象。</returns>
        <remarks><para>如果不存在第一个对象，则返回<b>Nothing，</b>例如，如果集合中不存在对象。若要确保<b>GetFirst</b>、、 和 方法在大型集合中正确操作，请调用 <see cref="M:Microsoft.Office.Interop.Outlook._Items.GetLast" /> <see cref="M:Microsoft.Office.Interop.Outlook._Items.GetNext" /> <see cref="M:Microsoft.Office.Interop.Outlook._Items.GetPrevious" /> <b>GetFirst，</b>然后再调用该集合上的<b>GetNext，</b>在调用<b>GetPrevious</b>之前调用<b>GetLast。</b> 要确保您始终在同一集合下生成的调用，请创建引用在进入循环前该集合的显式变量。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLast">
      <MemberSignature Language="C#" Value="public object GetLast ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetLast() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Outlook._Items.GetLast" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLast () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetLast();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(88)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回集合中的最后一个对象。</summary>
        <returns>一个 Object 值，代表集合包含的最后一个对象。</returns>
        <remarks><para>如果不存在<b>最后</b>一个对象（例如，如果集合为空，则返回 Nothing）。若要确保正确操作大型集合中的 、GetLast 、 和 方法，请先调用 <see cref="M:Microsoft.Office.Interop.Outlook._Items.GetFirst" /> <b></b> <see cref="M:Microsoft.Office.Interop.Outlook._Items.GetNext" /> <see cref="M:Microsoft.Office.Interop.Outlook._Items.GetPrevious" /> <b>GetFirst，</b>然后再对集合调用<b>GetNext，</b>在调用<b>GetPrevious</b>之前调用<b>GetLast。</b> 要确保您始终在同一集合下生成的调用，请创建引用在进入循环前该集合的显式变量。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNext">
      <MemberSignature Language="C#" Value="public object GetNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetNext() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Outlook._Items.GetNext" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNext () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetNext();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(87)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回集合中的下一个对象。</summary>
        <returns>一个 Object 值，代表集合包含的下一个对象。</returns>
        <remarks><para>如果不存在下一个对象，则返回<b>Nothing，</b>例如，如果已位于集合的末尾。若要确保大集合中 、 、 GetNext 和 方法的正确操作，请先调用 <see cref="M:Microsoft.Office.Interop.Outlook._Items.GetFirst" /> <see cref="M:Microsoft.Office.Interop.Outlook._Items.GetLast" /> <b></b> <see cref="M:Microsoft.Office.Interop.Outlook._Items.GetPrevious" /> <b>GetFirst，</b>然后再对集合调用<b>GetNext，</b>在调用<b>GetPrevious</b>之前调用<b>GetLast。</b> 要确保您始终在同一集合下生成的调用，请创建引用在进入循环前该集合的显式变量。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPrevious">
      <MemberSignature Language="C#" Value="public object GetPrevious ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetPrevious() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Outlook._Items.GetPrevious" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPrevious () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetPrevious();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(89)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回集合中的上一个对象。</summary>
        <returns>一个 Object 值，代表集合包含的上一个对象。</returns>
        <remarks><para>如果前一个对象不存在，则返回<b>Nothing，</b>例如，如果已位于集合的开头。若要确保大型集合中 、 、 和 GetPrevious 方法的正确操作，请先调用 <see cref="M:Microsoft.Office.Interop.Outlook._Items.GetFirst" /> <see cref="M:Microsoft.Office.Interop.Outlook._Items.GetLast" /> <see cref="M:Microsoft.Office.Interop.Outlook._Items.GetNext" /> <b>GetFirst，</b>然后再对集合<b></b>调用<b>GetNext，</b>在调用<b>GetPrevious</b>之前调用<b>GetLast。</b> 要确保您始终在同一集合下生成的调用，请创建引用在进入循环前该集合的显式变量。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IncludeRecurrences">
      <MemberSignature Language="C#" Value="public bool IncludeRecurrences { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IncludeRecurrences" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Outlook._Items.IncludeRecurrences" />
      <MemberSignature Language="VB.NET" Value="Public Property IncludeRecurrences As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IncludeRecurrences { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(206)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(206)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(206)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回<b>boolean</b> (<b>bool</b> C#) 如果集合应包括定期模式，则<b></b>指示 True <see cref="T:Microsoft.Office.Interop.Outlook.Items" /> 。 读/写。</summary>
        <value>To be added.</value>
        <remarks><para>此属性仅在 <b>Items</b> 集合包含约会时有效，并且不是按除升序顺序外 <see cref="P:Microsoft.Office.Interop.Outlook._AppointmentItem.Start" /> 的任何属性排序。 默认值为 <b>False</b> 。 使用此属性时您想要检索给定日期，所有的约会在定期约会会通常不会显示因为它们不与任何特定日期相关联。 如果需要进行排序和筛选在包含定期约会的约会项目，则必须按以下顺序进行: 升序排序的项进行排序，将 <b>IncludeRecurrences</b> 设置为 <b>True</b> ，然后筛选的项。 有关演示此顺序的代码示例，请参阅下面的第二个示例。 如果该集合包含不具有结束日期的定期约会，将属性设置为 <b>True</b> 可能会导致该集合无穷大。 一定要为此测试纳入任何循环。 当循环 <b>项</b> 集合的 <b>IncludeRecurrence</b> 属性设置为 <b>True</b> 时，不应使用 <b>项</b> 集合的 <b>Count</b> 属性。 <b>计数</b> 的值将是未定义的值。</para>
          <para>
            <b>警告</b>：筛选事件的排序列表将导致 IncludeRecurrences 属性无法按预期工作。 例如，按以下顺序将返回约会的所有实例;定期和非定期: (1) 按 Start 属性 (2) 设置为 false (3) 呼叫 限制 (即筛选器) 的属性进行排序。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[object Index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(object)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Outlook._Items.Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(Index As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[System::Object ^] { System::Object ^ get(System::Object ^ Index); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Index">或者是对象的索引号，或者是用于匹配集合中某个对象的默认属性的值。</param>
        <summary>从集合中返回一个 Outlook 项目。</summary>
        <value>一个代表指定对象的 Object 值。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public object Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parent" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Outlook._Items.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Parent { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(61441)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(61441)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回指定对象的 <b>对象</b> 的父级。 只读的。</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RawTable">
      <MemberSignature Language="C#" Value="public object RawTable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object RawTable" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Outlook._Items.RawTable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RawTable As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ RawTable { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(90)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(90)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>此对象、成员或枚举已被弃用并且不适合在您的代码中使用。</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (int Index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Remove([in]int32 Index) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Outlook._Items.Remove(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (Index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(int Index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(84)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Index">对象在集合中的索引值，索引从 1 开始编号。</param>
        <summary>从集合中删除对象。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetColumns">
      <MemberSignature Language="C#" Value="public void ResetColumns ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetColumns() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Outlook._Items.ResetColumns" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetColumns ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetColumns();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(93)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>清除已使用 方法缓存 <see cref="M:Microsoft.Office.Interop.Outlook._Items.SetColumns(System.String)" /> 的属性。</summary>
        <remarks><para>在调用 <b>ResetColumns</b> 方法后，所有属性都都可以访问。 <b>SetColumns</b> 应重用再次存储新的属性。如果没有先调用 <b>SetColumns</b> ， <b>ResetColumns</b> 将没有任何效果。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Restrict">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Outlook.Items Restrict (string Filter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Outlook.Items Restrict([in]string Filter) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Outlook._Items.Restrict(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Restrict (Filter As String) As Items" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Office::Interop::Outlook::Items ^ Restrict(System::String ^ Filter);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(100)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Outlook.Items</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Filter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Filter">要应用的筛选器字符串表达式。 有关详细信息，请参阅 <see cref="M:Microsoft.Office.Interop.Outlook._Items.Find(System.String)" />  方法。</param>
        <summary>将筛选器应用于集合，返回一个新集合，其中包含原始集合中与筛选器 <see cref="T:Microsoft.Office.Interop.Outlook.Items" />  匹配的所有项目。</summary>
        <returns>一 <b>个 Items</b> 集合，代表原始 <b>Items</b> 集合中与筛选器匹配的项。</returns>
        <remarks><para>此方法是使用方法或方法对集合中的特定项 <see cref="M:Microsoft.Office.Interop.Outlook._Items.Find(System.String)" /> <see cref="M:Microsoft.Office.Interop.Outlook._Items.FindNext" />  进行访问的替代方法。 如果集合中只有较少数量的项目，<b>Find</b> 或 <b>FindNext</b> 方法要比筛选更快。 如果集合中项目较多，尤其是预计在大型集合中仅可查找到少量几个项目时，<b>Restrict</b> 方法的速度会明显更快。</para>
          <para>
            <b>注意</b>：如果使用用户定义的字段作为 <b>Find</b> 或 <b>Restrict</b> 子句的一部分，则文件夹中必须存在用户定义的字段。 否则代码会产生错误，指出字段未知。 可以通过显示“字段选择器”然后单击“新建”来将字段添加到文件夹中。</para>
          <para>此方法不能与下列属性一起使用，否则将导致错误：</para>
          <list type="table">
            <item>
              <description>BodyCategoriesChildrenClassCompaniesCompanyLastFirstNoSpaceCompanyLastFirstSpaceOnlyContactNamesContactsConversationIndexDLNameEmail1EntryIDEmail2EntryIDEmail3EntryIDEntryIDHTMLBodyIsOnlineMeetingLastFirstAndSuffixLastFirstNoSpaceAutoResolvedWinnerBodyFormatInternetCodePagePermission</description>
              <description>LastFirstNoSpaceCompanyLastFirstSpaceOnlyLastFirstSpaceOnlyCompanyLastFirstNoSpaceAndSuffixMemberCountNetMeetingAliasNetMeetingAutoStartNetMeetingOrganizerAliasNetMeetingServerNetMeetingTypeRecurrenceStateReplyRecipientsReceivedByEntryIDRecevedOnBehalfOfEntryIDResponseStateSavedSentSubmittedVotingOptionsDownloadStateIsConflictMeetingWorkspaceURL</description>
            </item>
          </list>
          <para>创建 Find 方法和 Restrict 方法的筛选器</para>
          <para>根据要筛选的字段类型，筛选器的语法将有所不同。</para>
          <para>字符串（适用于文本字段） </para>
          <para>搜索 Text 字段时，可以使用撇号 (') 或双引号 ("") 来分隔作为筛选器一部分的值。 例如，当字段的类型为<b>String</b>时，以下所有行 (<b>字符串C#) ：</b> </para>
          <para>sFilter = "[CompanyName] = 'Microsoft'" </para>
          <para>sFilter = "[CompanyName] = ""Microsoft""" </para>
          <para>sFilter = "[CompanyName] = " &amp; Chr (34 &amp;) Microsoft" &amp; Chr (34) </para>
          <para>在 Jet 或 DASL 查询中指定筛选器的过程中，如果使用一对单引号来分隔构成筛选器的字符串，而且该字符串包含另一个单引号或撇号，则应在这个单引号或撇号前面添加一个单引号以用作转义符。如果使用一对双引号来分隔字符串，则也可使用类似方法。如果该字符串包含一个双引号，则应在该双引号前面添加一个双引号以用作转义符。</para>
          <para>例如，在筛选 <b>Subject</b> 属性等于"不能"的 DASL 筛选器字符串中，整个筛选器字符串由一对双引号分隔，而嵌入字符串不能用一对单引号分隔。 需要在此筛选器字符串中转义三个字符：属性引用的起始双引号和结束双引号，以及单词的值条件中的撇号不能 http://schemas.microsoft.com/mapi/proptag/0x0037001f 。 通过应用适当的转义符，您可将筛选器字符串表示如下：</para>
          <para>filter = "@SQL="" http://schemas.microsoft.com/mapi/proptag/0x0037001f "" = 'can't'"</para>
          <para>或者，也可使用 chr(34) 函数来代表用作转义符的双引号（其 ASCII 字符值为 34）。 通过使用 chr(34) 代替双引号转义符，您可将上一个示例表示如下：</para>
          <para>filter = "@SQL= " &amp; Chr (34) &amp; " http://schemas.microsoft.com/mapi/proptag/0x0037001f " _</para>
          <para>    &amp; Chr (34) " &amp; = " &amp; "'can't'"</para>
          <para>对于使用 <b>ci_startswith</b> 或 <b>ci_phrasematch</b> 运算符的 DASL 查询而言，转义单引号和双引号字符也是必需的。 例如，以下查询可在邮件主题中执行针对 can't 的短语匹配查询： </para>
          <para>filter = "@SQL=" &amp; Chr (34) &amp; " http://schemas.microsoft.com/mapi/proptag/0x0037001E " _</para>
          <para>    &amp; Chr (34) " &amp; ci_phrasematch " &amp; "'can't'"</para>
          <para>另一个示例是一个 DASL 筛选器字符串，用于筛选 <b>Subject</b> 属性是否等于正确的单词，其中单词 stuff 用双引号括起来。 在此情况下，必须通过以下方式对括起的双引号进行转义：</para>
          <para>filter = "@SQL="" http://schemas.microsoft.com/mapi/proptag/0x0037001f "" = 'the right ""stuff""'"</para>
          <para>对于包含空格、单引号、双引号或百分号字符的命名属性，对这些属性的引用将应用一组不同的转义规则。 有关更多信息，请参阅按命名空间引用属性。</para>
          <para>日期</para>
          <para>虽然日期和时间通常以“日期”格式存储，但 <b>Find</b> 和 <b>Restrict</b> 方法要求将日期和时间转换为字符串表示形式。 为确保日期的格式满足 Microsoft Outlook 的要求，请使用 <b>Format</b> 函数。 以下示例创建了筛选器以查找所有在 1999 年 1 月 15 日下午 3:30 以后修改过的联系人。 </para>
          <para>sFilter = "[LastModificationTime] &gt; '" &amp; Format ("1/15/99 3：30pm"， "ddddd h：nn AMPM") &amp; "'"</para>
          <para>布尔运算符</para>
          <para>Boolean 运算符、TRUE/FALSE、YES/NO 和 ON/OFF 等都不应转换为字符串。例如，要确定是否已为联系人启用日记，可使用以下筛选器：</para>
          <para>sFilter = "[Journal] = True" </para>
          <para>
            <b>注意</b>：如果使用引号作为 <b>布尔</b> 字段的分隔符，则空字符串将查找其字段为 <b>False</b> 的项，所有非空字符串将查找其字段为 True 的 <b>项</b>。 </para>
          <para>关键字（或类别）</para>
          <para>"类别"字段的类型为关键字，旨在保留多个值。 如果以编程方式进行访问，类别字段的行为类似文本字段，且字符串必须完全匹配。 文本字符串中的值将通过逗号和空格分隔。 这通常意味着，当关键字字段包含多个值时，不能使用 <b>Find</b> 和 <b>Restrict</b> 方法对关键字字段进行操作。 例如，如果“商务”类别和“商务和社会”类别中各包含一个联系人，则无法轻松使用 <b>Find</b> 和 <b>Restrict</b> 方法检索“商务”类别中的所有项目。 但可循环遍历文件夹中的所有联系人，并使用 <b>Instr</b> 函数测试字符串“商务”是否包含在整个关键字字段中。 </para>
          <para>
            <b>注意</b>：如果将"类别"字段限制为两个值或较低的值数，则一个可能的例外。 此时，可以使用 <b>Find</b> 和 <b>Restrict</b> 方法结合 OR 逻辑运算符来检索所有商务联系人。 例如（在伪代码中）：“商务” OR “商务, 个人” OR “个人, 商务”。 类别字符串不区分大小写。 </para>
          <para>整数</para>
          <para>可以搜索 <b>Integer</b> 字段（带或不带引号）作为分隔符。 下列筛选器将查找使用 Outlook 2000 创建的联系人： </para>
          <para>sFilter = "[OutlookInternalVersion] = 92711" </para>
          <para>sFilter = "[OutlookInternalVersion] = '92711'"</para>
          <para>使用变量作为筛选器的一部分</para>
          <para>如 <b>Restrict</b> 方法示例所示，可使用变量中的值作为筛选器的一部分。 下面的 Microsoft Visual Basic示例演示了使用变量作为筛选器一部分的语法。 </para>
          <para>sFullName = "Dan Wilson" </para>
          <para>' This approach uses Chr (34) to delimit the value. </para>
          <para>sFilter = "[FullName] = " &amp; Chr (34 &amp;) sFullName &amp; Chr (34)  </para>
          <para>' This approach uses double quotation marks to delimit the value. </para>
          <para>sFilter = "[FullName] = """ &amp; sFullName &amp; """"</para>
          <para>使用逻辑运算符作为筛选器的一部分</para>
          <para>可以使用的逻辑运算符为 AND、OR 和 NOT。 以下是 Restrict 方法子句的变体，因此<b></b>您可以指定多个条件。  </para>
          <para>OR：以下代码返回所有类别为“商务”或“个人”的联系人项目。 </para>
          <para>sFilter = "[Categories] = 'Personal' Or [Categories] = 'Business'" </para>
          <para>AND：以下代码检索所有工作单位为 Microsoft 的私人联系人。 </para>
          <para>sFilter = "[Categories] = 'Personal' and [CompanyName] = 'Microsoft'" </para>
          <para>NOT：以下代码检索所有工作单位不是 Microsoft 的私人联系人。 </para>
          <para>sFilter = "[Categories] = 'Personal' and Not ([CompanyName] = 'Microsoft') "</para>
          <para>其他注意事项</para>
          <para>如果试图通过用户定义的字段使用 <b>Find</b> 和 <b>Restrict</b> 方法，这些字段必须在文件夹中已定义，否则将发生错误。 无法执行“包含”操作。 例如，不能使用 <b>Find</b> 和 <b>Restrict</b> 搜索“主题”字段中包含特定字词的项目。 相反，您可以使用 方法，也可以循环访问文件夹中的所有项目，并使用 InStr 函数在字段中 <see cref="M:Microsoft.Office.Interop.Outlook._Application.AdvancedSearch(System.String,System.Object,System.Object,System.Object)" /> 执行搜索<b></b>。 可以使用 <b>Restrict</b> 方法搜索以特定范围内的字符开始的项目。 例如，若要搜索姓氏以字母 M 开头的所有联系人，请使用以下筛选器： </para>
          <para>sFilter = "[LastName] &gt; 'LZZZ' and [LastName] &lt; 'N'"</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Session">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Outlook.NameSpace Session { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Outlook.NameSpace Session" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Outlook._Items.Session" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Session As NameSpace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Outlook::NameSpace ^ Session { Microsoft::Office::Interop::Outlook::NameSpace ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(61451)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(61451)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Outlook.NameSpace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回 <see cref="T:Microsoft.Office.Interop.Outlook.NameSpace" />  当前会话的对象。 只读。</summary>
        <value>To be added.</value>
        <remarks><para><b>Session</b>属性和 <see cref="M:Microsoft.Office.Interop.Outlook._Application.GetNamespace(System.String)" /> 方法可以互换为当前会话获取<b>NameSpace</b>对象。 这两个成员可以实现同一目的。 例如，以下语句对执行相同的功能：</para>
          <code>Dim objNamespace As Outlook.NameSpace = _
    Application.GetNamespace("MAPI")</code>
          <code>Dim objSession As Outlook.NameSpace = Application.Session</code>
          <code>Outlook.NameSpace objNamespace = 
    Application.GetNamespace("MAPI");</code>
          <code>Outlook.NameSpace objSession = Application.Session;</code>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SetColumns">
      <MemberSignature Language="C#" Value="public void SetColumns (string Columns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetColumns([in]string Columns) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Outlook._Items.SetColumns(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetColumns (Columns As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetColumns(System::String ^ Columns);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(92)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Columns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Columns">一个包含要缓存的属性的名称的字符串。 此字符串中的属性名以逗号分隔。</param>
        <summary>缓存某些属性，从而极大提高集合中的项目的指定属性的访问速度。</summary>
        <remarks><para><b>SetColumns</b>方法可用于在集合中 <see cref="T:Microsoft.Office.Interop.Outlook.Items" /> 进行浏览。 如果不使用此方法，则Microsoft Outlook必须打开每个项目以访问属性。 使用 <b>SetColumns</b> 方法时，Outlook 只检查您已缓存，并提供快速、 只读方式访问这些属性的属性。</para>
          <para>应用 <b>SetColumns</b> 方法对集合中的特定属性之后, 不能读取其他属性的集合;未缓存的属性将返回空值。 不能既写到任何该集合的属性。 或者，如果您需要读写、快速访问一组项目，请使用 <see cref="T:Microsoft.Office.Interop.Outlook.Table" /> 对象。</para>
          <para>
            <b>SetColumns</b> 不能使用，并将产生错误，使用返回的对象的任何属性。它不能与下列属性一起使用:</para>
          <list type="table">
            <item>
              <description>AutoResolvedWinner</description>
              <description>InternetCodePage</description>
            </item>
            <item>
              <description>正文</description>
              <description>MeetingWorkspaceURL</description>
            </item>
            <item>
              <description>BodyFormat</description>
              <description>
                <see cref="P:Microsoft.Office.Interop.Outlook._DistListItem.MemberCount" />
              </description>
            </item>
            <item>
              <description>类别</description>
              <description>ReceivedByEntryID</description>
            </item>
            <item>
              <description>
                <see cref="P:Microsoft.Office.Interop.Outlook._ContactItem.Children" />
              </description>
              <description>ReceivedOnBehalfOfEntryID</description>
            </item>
            <item>
              <description>类</description>
              <description>
                <see cref="P:Microsoft.Office.Interop.Outlook._AppointmentItem.RecurrenceState" />
              </description>
            </item>
            <item>
              <description>Companies</description>
              <description>ReplyRecipients</description>
            </item>
            <item>
              <description>
                <see cref="P:Microsoft.Office.Interop.Outlook._DistListItem.DLName" />
              </description>
              <description>
                <see cref="P:Microsoft.Office.Interop.Outlook._TaskItem.ResponseState" />
              </description>
            </item>
            <item>
              <description>DownloadState</description>
              <description>Saved</description>
            </item>
            <item>
              <description>EntryID</description>
              <description>发件箱</description>
            </item>
            <item>
              <description>HTMLBody</description>
              <description>Submitted</description>
            </item>
            <item>
              <description>IsConflict</description>
              <description>
                <see cref="P:Microsoft.Office.Interop.Outlook._MailItem.VotingOptions" />
              </description>
            </item>
          </list>
          <para><b>ConversationIndex</b> 属性不能使用 <b>SetColumns</b> 方法进行缓存。但是，此属性不会导致像上面所列的其他属性的错误。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort (string Property, object Descending);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Sort([in]string Property, [in]object Descending) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Outlook._Items.Sort(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Sort (Property As String, Optional Descending As Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(97)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Property" Type="System.String" />
        <Parameter Name="Descending" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Property">按其进行排序，这可能用括号括起来，例如，"[公司名称]"的属性的名称。 包含空格的用户定义属性必须括在中括号中。 可能不是用户定义的属性的类型的关键字，并不是多值的属性，如某一类别。 对于用户定义的属性，该属性必须存在于 的 <b>UserDefinedProperties</b> 集合中，该集合代表 <see cref="P:Microsoft.Office.Interop.Outlook._Items.Parent" /> <see cref="T:Microsoft.Office.Interop.Outlook.Folder" /> 包含项目的对象。</param>
        <param name="Descending"><b>真</b> 要按降序排序。 默认值为 <b>False</b> (升序)。</param>
        <summary>按指定属性对项目的集合进行排序。 在完成该方法后将集合的索引重新设置为 1。</summary>
        <remarks><para>
            <b>排序</b> 将仅影响集合中项目的顺序。 它不影响浏览器视图中项目的顺序。</para>
          <para>
            <b>不能使用</b> Sort，如果参数是下列属性之一， <paramref name="property" /> 则会导致错误：                </para>
          <list type="table">
            <item>
              <description>
                <b>类别</b>
              </description>
              <description>
                <see cref="P:Microsoft.Office.Interop.Outlook._ContactItem.LastFirstSpaceOnly" />
              </description>
            </item>
            <item>
              <description>
                <see cref="P:Microsoft.Office.Interop.Outlook._ContactItem.Children" />
              </description>
              <description>
                <see cref="P:Microsoft.Office.Interop.Outlook._ContactItem.LastFirstSpaceOnlyCompany" />
              </description>
            </item>
            <item>
              <description>
                <b>类</b>
              </description>
              <description>
                <see cref="P:Microsoft.Office.Interop.Outlook._DistListItem.MemberCount" />
              </description>
            </item>
            <item>
              <description>
                <see cref="P:Microsoft.Office.Interop.Outlook._ContactItem.CompanyLastFirstNoSpace" />
              </description>
              <description>
                <see cref="P:Microsoft.Office.Interop.Outlook._ContactItem.NetMeetingAlias" />
              </description>
            </item>
            <item>
              <description>
                <see cref="P:Microsoft.Office.Interop.Outlook._ContactItem.CompanyLastFirstSpaceOnly" />
              </description>
              <description>
                <see cref="P:Microsoft.Office.Interop.Outlook._AppointmentItem.RecurrenceState" />
              </description>
            </item>
            <item>
              <description>
                <see cref="P:Microsoft.Office.Interop.Outlook._DistListItem.DLName" />
              </description>
              <description>
                <see cref="P:Microsoft.Office.Interop.Outlook._TaskItem.ResponseState" />
              </description>
            </item>
            <item>
              <description>
                <see cref="P:Microsoft.Office.Interop.Outlook._ContactItem.LastFirstAndSuffix" />
              </description>
              <description>
                <b>Saved</b>
              </description>
            </item>
            <item>
              <description>
                <see cref="P:Microsoft.Office.Interop.Outlook._ContactItem.LastFirstNoSpace" />
              </description>
              <description>
                <b>已发送</b>
              </description>
            </item>
            <item>
              <description>
                <see cref="P:Microsoft.Office.Interop.Outlook._ContactItem.LastFirstNoSpaceCompany" />
              </description>
              <description />
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
  </Members>
</Type>
