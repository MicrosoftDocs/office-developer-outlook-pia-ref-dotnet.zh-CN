<Type Name="_FormRegion" FullName="Microsoft.Office.Interop.Outlook._FormRegion">
  <Metadata><Meta Name="ms.openlocfilehash" Value="170a1d134f5a487d0a43dde3247d20e4b029e8bb" /><Meta Name="ms.sourcegitcommit" Value="372abf58b21f4fab503d106f0e8c8a2ac45f9332" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="01/12/2019" /><Meta Name="ms.locfileid" Value="27902269" /></Metadata><TypeSignature Language="C#" Value="public interface _FormRegion" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract _FormRegion" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Interop.Outlook._FormRegion" />
  <TypeSignature Language="VB.NET" Value="Public Interface _FormRegion" />
  <TypeSignature Language="C++ CLI" Value="public interface class _FormRegion" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("0006305A-0000-0000-C000-000000000046")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibType(4160)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="f28fc-101">这是与相应的 COM 对象的互操作性的托管代码需要 COM coclass 中的主接口。</span><span class="sxs-lookup"><span data-stu-id="f28fc-101">This is a primary interface in a COM coclass that is required by managed code for interoperability with the corresponding COM object.</span></span> <span data-ttu-id="f28fc-102">仅当您想要使用的方法共享相同的名称的 COM 对象; 事件时，才使用此主接口在这种情况下，强制转换为此接口调用方法，并强制转换为最新的事件接口，连接到该事件。</span><span class="sxs-lookup"><span data-stu-id="f28fc-102">Use this primary interface only when the method you want to use shares the same name as an event of the COM object; in this case, cast to this interface to call the method, and cast to the latest events interface to connect to the event.</span></span> <span data-ttu-id="f28fc-103">否则，使用.NET 接口派生自 COM coclass 访问方法、 属性和事件的 COM 对象。</span><span class="sxs-lookup"><span data-stu-id="f28fc-103">Otherwise, use the .NET interface that is derived from the COM coclass to access methods, properties, and events of the COM object.</span></span> <span data-ttu-id="f28fc-104">有关 COM 对象的信息，请参阅<see cref="T:Microsoft.Office.Interop.Outlook.FormRegion" />。</span><span class="sxs-lookup"><span data-stu-id="f28fc-104">For information about the COM object, see <see cref="T:Microsoft.Office.Interop.Outlook.FormRegion" />.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Application">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Outlook.Application Application { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Outlook.Application Application" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Outlook._FormRegion.Application" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Application As Application" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Outlook::Application ^ Application { Microsoft::Office::Interop::Outlook::Application ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(61440)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(61440)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Outlook.Application</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f28fc-105">返回<see cref="T:Microsoft.Office.Interop.Outlook.Application" />表示 Outlook application 对象的父对象。</span><span class="sxs-lookup"><span data-stu-id="f28fc-105">Returns an <see cref="T:Microsoft.Office.Interop.Outlook.Application" />  object that represents the parent Outlook application for the  object.</span></span> <span data-ttu-id="f28fc-106">此为只读属性。</span><span class="sxs-lookup"><span data-stu-id="f28fc-106">Read-only.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Class">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Outlook.OlObjectClass Class { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Outlook.OlObjectClass Class" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Outlook._FormRegion.Class" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Class As OlObjectClass" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Outlook::OlObjectClass Class { Microsoft::Office::Interop::Outlook::OlObjectClass get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(61450)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(61450)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Outlook.OlObjectClass</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f28fc-107">返回<see cref="T:Microsoft.Office.Interop.Outlook.OlObjectClass" />常量，指示对象的类。</span><span class="sxs-lookup"><span data-stu-id="f28fc-107">Returns an <see cref="T:Microsoft.Office.Interop.Outlook.OlObjectClass" /> constant indicating the object's class.</span></span> <span data-ttu-id="f28fc-108">此为只读属性。</span><span class="sxs-lookup"><span data-stu-id="f28fc-108">Read-only.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Detail">
      <MemberSignature Language="C#" Value="public string Detail { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Detail" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Outlook._FormRegion.Detail" />
      <MemberSignature Language="VB.NET" Value="Public Property Detail As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Detail { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(64309)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(64309)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(64309)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f28fc-109">返回或设置一个<b>字符串</b>（C# 中的<b>字符串</b>） 代表后相邻的窗体区域的显示名称显示在标题中的运行时的文本。</span><span class="sxs-lookup"><span data-stu-id="f28fc-109">Returns or sets a <b>String</b> (<b>string</b> in C#) representing the text displayed at runtime in the header after the display name of an adjoining form region.</span></span> <span data-ttu-id="f28fc-110">读/写。</span><span class="sxs-lookup"><span data-stu-id="f28fc-110">Read/write.</span></span></summary>
        <value>To be added.</value>
        <remarks><para><span data-ttu-id="f28fc-p105">对于相邻窗体区域只显示 <b>详细信息</b> 属性。对于独立窗体区域，它将被忽略。</span><span class="sxs-lookup"><span data-stu-id="f28fc-p105">The <b>Detail</b> property is displayed for adjoining form regions only. It is ignored for separate form regions.</span></span></para>
          <para><span data-ttu-id="f28fc-p106"><b>详细信息</b> 属性是可选的相邻窗体区域。</span><span class="sxs-lookup"><span data-stu-id="f28fc-p106">The <b>Detail</b> property is optional for an adjoining form region. </span></span></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Outlook._FormRegion.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(12289)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(12289)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f28fc-114">返回一个<b>字符串</b>（C# 中的<b>字符串</b>） 表示窗体区域的显示名称。</span><span class="sxs-lookup"><span data-stu-id="f28fc-114">Returns a <b>String</b> (<b>string</b> in C#) representing the display name of the form region.</span></span> <span data-ttu-id="f28fc-115">此为只读属性。</span><span class="sxs-lookup"><span data-stu-id="f28fc-115">Read-only.</span></span></summary>
        <value>To be added.</value>
        <remarks><para><span data-ttu-id="f28fc-116">可选窗体区域的显示名称。</span><span class="sxs-lookup"><span data-stu-id="f28fc-116">The display name is optional for a form region.</span></span> <span data-ttu-id="f28fc-117">如果已定义的值&lt;formRegionName&gt;标记中的相应窗体区域清单 XML 文件，此值将映射到的<b>DisplayName</b>属性的值。</span><span class="sxs-lookup"><span data-stu-id="f28fc-117">If you have defined a value for the &lt;formRegionName&gt; tag in the corresponding form region manifest XML file, this value will map to the value of the <b>DisplayName</b> property.</span></span> <span data-ttu-id="f28fc-118">窗体区域的 XML 架构的详细信息，请参阅<a href="http://msdn.microsoft.com/en-us/library/default.aspx">MSDN 库</a>中 Microsoft Outlook 2010 XML 架构参考</span><span class="sxs-lookup"><span data-stu-id="f28fc-118">For more information on the XML schema for form regions, see the Microsoft Outlook 2010 XML Schema Reference in the <a href="http://msdn.microsoft.com/en-us/library/default.aspx">MSDN Library</a></span></span></para>
          <para><span data-ttu-id="f28fc-119">在运行时在单独窗体区域，Microsoft Office Fluent 功能区的显示选项卡或相邻的窗体区域的标题中显示的<b>DisplayName</b>属性的值。</span><span class="sxs-lookup"><span data-stu-id="f28fc-119">The value of the <b>DisplayName</b> property is displayed at runtime in the Show tab of the Microsoft Office Fluent ribbon for a separate form region, or in the header of an adjoining form region.</span></span>  <span data-ttu-id="f28fc-120">它用于默认的 locale，并且可以通过&lt;stringOverride&gt;相应窗体区域清单 XML 文件中的标记。</span><span class="sxs-lookup"><span data-stu-id="f28fc-120">It is used for the default locale, and can be overridden by the &lt;stringOverride&gt; tag in the corresponding form region manifest XML file.</span></span> <span data-ttu-id="f28fc-121">该字符串不区分大小写，并其最大长度为 256 个字符。</span><span class="sxs-lookup"><span data-stu-id="f28fc-121">The string is case-insensitive, and its maximum length is 256 characters.</span></span></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableAutoLayout">
      <MemberSignature Language="C#" Value="public bool EnableAutoLayout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableAutoLayout" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Outlook._FormRegion.EnableAutoLayout" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableAutoLayout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableAutoLayout { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(64538)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(64538)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(64538)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f28fc-122">返回或设置一个<b>布尔</b>(C# 中<b>bool</b> ) 的指定是否使用自动调整大小功能设计窗体设计器中的窗体区域时的版式。</span><span class="sxs-lookup"><span data-stu-id="f28fc-122">Returns or sets a <b>Boolean</b> (<b>bool</b> in C#) that specifies whether to use the automatic layout resizing feature when designing form regions in the forms designer.</span></span> <span data-ttu-id="f28fc-123">读/写</span><span class="sxs-lookup"><span data-stu-id="f28fc-123">Read/write</span></span></summary>
        <value>To be added.</value>
        <remarks><para><span data-ttu-id="f28fc-p111">窗体设计器中的自动版式调整大小功能会在调整窗体大小时动态地重新计算窗体版式。此功能仅用于窗体设计器中的窗体区域。</span><span class="sxs-lookup"><span data-stu-id="f28fc-p111">The automatic layout resizing feature in the forms designer recalculates the form layout dynamically as the form is resized. This feature is only available to form regions in the forms designer.</span></span></para>
          <para><span data-ttu-id="f28fc-126">当此属性为 <b>True</b> 时，窗体设计器会执行自动版式调整大小。</span><span class="sxs-lookup"><span data-stu-id="f28fc-126">When this property is <b>True</b>, the forms designer performs automatic layout resizing.</span></span>  <span data-ttu-id="f28fc-127">当此属性为 <b>False</b> 时，窗体设计器并不会执行自动版式调整大小。</span><span class="sxs-lookup"><span data-stu-id="f28fc-127">When this property is <b>False</b>, the forms designer does not perform automatic layout resizing.</span></span>  <span data-ttu-id="f28fc-128">默认值为 <b>True</b> 。</span><span class="sxs-lookup"><span data-stu-id="f28fc-128">The default value is <b>True</b>.</span></span></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Form">
      <MemberSignature Language="C#" Value="public object Form { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Form" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Outlook._FormRegion.Form" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Form As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Form { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(64313)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(64313)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f28fc-p113">返回一个 <b>对象</b> ，表示 <b>MSForms.UserForm</b> 对象。只读的。</span><span class="sxs-lookup"><span data-stu-id="f28fc-p113">Returns an <b>Object</b> representing the <b>MSForms.UserForm</b> object. Read-only.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FormRegionMode">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Outlook.OlFormRegionMode FormRegionMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Outlook.OlFormRegionMode FormRegionMode" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Outlook._FormRegion.FormRegionMode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FormRegionMode As OlFormRegionMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Outlook::OlFormRegionMode FormRegionMode { Microsoft::Office::Interop::Outlook::OlFormRegionMode get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(64308)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(64308)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Outlook.OlFormRegionMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f28fc-p114">返回一个 <b>OlFormRegionMode</b> 常量，用于指示该窗体区域是否在读取页、 撰写页，或阅读窗格。只读的。</span><span class="sxs-lookup"><span data-stu-id="f28fc-p114">Returns an <b>OlFormRegionMode</b> constant that indicates whether the form region is in a read page, compose page, or Reading Pane. Read-only.</span></span></summary>
        <value>To be added.</value>
        <remarks><para><span data-ttu-id="f28fc-133">如果用户具有的阅读窗格中的邮件项目，则可以使用<see cref="P:Microsoft.Office.Interop.Outlook._MailItem.Sent" />属性可以进一步确定用户是否在编辑模式或阅读的模式的阅读窗格中。</span><span class="sxs-lookup"><span data-stu-id="f28fc-133">If the user has a mail item in the Reading Pane, you can use the <see cref="P:Microsoft.Office.Interop.Outlook._MailItem.Sent" /> property to further determine if the user is in the edit mode or the read mode of the Reading Pane.</span></span> <span data-ttu-id="f28fc-134">根据邮件项目是处于编辑模式（邮件项目位于"草稿"文件夹中）还是阅读模式（邮件项目位于"收件箱"或"已发送邮件"文件夹中），邮件项目在阅读窗格中的显示方式会有所不同。</span><span class="sxs-lookup"><span data-stu-id="f28fc-134">A mail item is displayed differently in the Reading Pane if it is in the edit mode (the mail item is in the Draft folder) than if it is in the read mode (the mail item is in the Inbox or Sent folder).</span></span></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Inspector">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Outlook.Inspector Inspector { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Outlook.Inspector Inspector" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Outlook._FormRegion.Inspector" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Inspector As Inspector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Outlook::Inspector ^ Inspector { Microsoft::Office::Interop::Outlook::Inspector ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(61502)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(61502)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Outlook.Inspector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f28fc-135">返回<see cref="T:Microsoft.Office.Interop.Outlook.Inspector" />对象，表示承载窗体区域的检查器。</span><span class="sxs-lookup"><span data-stu-id="f28fc-135">Returns an <see cref="T:Microsoft.Office.Interop.Outlook.Inspector" /> object representing the Inspector that hosts the form region.</span></span> <span data-ttu-id="f28fc-136">此为只读属性。</span><span class="sxs-lookup"><span data-stu-id="f28fc-136">Read-only.</span></span></summary>
        <value>To be added.</value>
        <remarks><para><span data-ttu-id="f28fc-137">如果窗体区域显示在阅读窗格中，则返回<b>Nothing</b> （中的空引用 (在 Visual Basic 中为 Nothing) C#）。</span><span class="sxs-lookup"><span data-stu-id="f28fc-137">Returns <b>Nothing</b> (a null reference (Nothing in Visual Basic) in C#) if the form region is displayed in the Reading Pane.</span></span></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="InternalName">
      <MemberSignature Language="C#" Value="public string InternalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InternalName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Outlook._FormRegion.InternalName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InternalName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ InternalName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(8450)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(8450)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f28fc-138">返回一个<b>字符串</b>（C# 中的<b>字符串</b>），表示窗体区域的内部编程名称窗体区域清单中定义。</span><span class="sxs-lookup"><span data-stu-id="f28fc-138">Returns a <b>String</b> (<b>string</b> in C#) that represents the internal programmatic name of the form region as defined in the manifest for the form region.</span></span> <span data-ttu-id="f28fc-139">此为只读属性。</span><span class="sxs-lookup"><span data-stu-id="f28fc-139">Read-only.</span></span></summary>
        <value>To be added.</value>
        <remarks><para><span data-ttu-id="f28fc-140">窗体区域所需的内部名称。</span><span class="sxs-lookup"><span data-stu-id="f28fc-140">The internal name is required for a form region.</span></span> <span data-ttu-id="f28fc-141">&lt;名称&gt;相应窗体区域清单 XML 文件中的标记映射到<b>InternalName</b>属性的值。</span><span class="sxs-lookup"><span data-stu-id="f28fc-141">The &lt;name&gt; tag in the corresponding form region manifest XML file maps to the value of the <b>InternalName</b> property.</span></span> <span data-ttu-id="f28fc-142">窗体区域的 XML 架构的详细信息，请参阅<a href="http://msdn.microsoft.com/en-us/library/default.aspx">MSDN 库</a>中 Microsoft Outlook 2010 XML 架构参考</span><span class="sxs-lookup"><span data-stu-id="f28fc-142">For more information on the XML schema for form regions, see the Microsoft Outlook 2010 XML Schema Reference in the <a href="http://msdn.microsoft.com/en-us/library/default.aspx">MSDN Library</a></span></span></para>
          <para><span data-ttu-id="f28fc-p119"><b>InternalName</b> 属性的值使用外接程序或Microsoft Outlook来引用该窗体区域，例如，确定要加载的窗体区域或从本地化的字符串资源中加载字符串。 <b>InternalName</b> 属性支持仅包含 ASCII 字符。该字符串不区分大小写，并其最大长度为 256 个字符。</span><span class="sxs-lookup"><span data-stu-id="f28fc-p119">The value of the <b>InternalName</b> property is used by the add-in or Microsoft Outlook to refer to the form region, for example, to determine which form region is being loaded or to load strings from the localized string resources. The <b>InternalName</b> property supports only ASCII characters. The string is case-insensitive, and its maximum length is 256 characters.</span></span></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsExpanded">
      <MemberSignature Language="C#" Value="public bool IsExpanded { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExpanded" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Outlook._FormRegion.IsExpanded" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExpanded As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExpanded { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(64312)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(64312)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f28fc-146">返回一个<b>boolean 类型的值</b>(C# 中<b>bool</b> )，该值指示是否展开窗体区域。</span><span class="sxs-lookup"><span data-stu-id="f28fc-146">Returns a <b>Boolean</b> (<b>bool</b> in C#) that indicates if the form region is expanded.</span></span> <span data-ttu-id="f28fc-147">此为只读属性。</span><span class="sxs-lookup"><span data-stu-id="f28fc-147">Read-only.</span></span></summary>
        <value>To be added.</value>
        <remarks><para><span data-ttu-id="f28fc-148">此属性仅适用于相邻窗体区域，对于独立窗体区域将被忽略。</span><span class="sxs-lookup"><span data-stu-id="f28fc-148">This property applies to adjoining form regions only and is ignored for separate form regions.</span></span></para>
          <para><span data-ttu-id="f28fc-149">Outlook 始终首先加载的窗体区域处于展开状态，并将 <b>IsExpanded</b> 设置为 <b>True</b> 。</span><span class="sxs-lookup"><span data-stu-id="f28fc-149">Outlook always first loads a form region in an expanded state and sets <b>IsExpanded</b> to <b>True</b>.</span></span> <span data-ttu-id="f28fc-150">如果窗体区域的初始状态是将折叠，则 Outlook 立即关闭窗体区域，将触发<see cref="E:Microsoft.Office.Interop.Outlook.FormRegionEvents_Event.Expanded" />事件<paramref name="Expand" />正在<b>False</b>，并设置为<b>False</b> <b>IsExpanded</b>的参数。</span><span class="sxs-lookup"><span data-stu-id="f28fc-150">If the initial state of the form region is to be collapsed, then Outlook immediately closes the form region, fires the <see cref="E:Microsoft.Office.Interop.Outlook.FormRegionEvents_Event.Expanded" /> event with the <paramref name="Expand" /> parameter being <b>False</b>, and sets  <b>IsExpanded</b> to <b>False</b>.</span></span> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object Item { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Outlook._FormRegion.Item" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Item { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(64096)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(64096)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f28fc-p122">返回对应于绑定到窗体区域的 Outlook 项的 <b>对象</b> 。只读的。</span><span class="sxs-lookup"><span data-stu-id="f28fc-p122">Returns an <b>Object</b> corresponding to the Outlook item bound to the form region. Read-only.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Language">
      <MemberSignature Language="C#" Value="public int Language { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Language" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Outlook._FormRegion.Language" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Language As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Language { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(64065)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(64065)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f28fc-153">返回一个<b>整数</b>(C# 中<b>int</b> ) 值，该值指示当前语言的 LCID。</span><span class="sxs-lookup"><span data-stu-id="f28fc-153">Returns an <b>Integer</b> (<b>int</b> in C#) value that indicates the LCID for the current language.</span></span> <span data-ttu-id="f28fc-154">此为只读属性。</span><span class="sxs-lookup"><span data-stu-id="f28fc-154">Read-only.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public object Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parent" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Outlook._FormRegion.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Parent { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(61441)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(61441)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f28fc-p124">返回父 <b>对象</b> 的窗体区域。只读的。</span><span class="sxs-lookup"><span data-stu-id="f28fc-p124">Returns the parent <b>Object</b> of the form region. Read-only.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reflow">
      <MemberSignature Language="C#" Value="public void Reflow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reflow() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Outlook._FormRegion.Reflow" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reflow ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reflow();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(64315)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f28fc-157">使 Outlook 重新计算相邻窗体区域的高度，从而显示该窗体区域中的所有可视控件。</span><span class="sxs-lookup"><span data-stu-id="f28fc-157">Causes Outlook to recalculate the height of an adjoining form region to display all  the visible controls in the form region.</span></span></summary>
        <remarks><para><span data-ttu-id="f28fc-p125"><b>重排</b> 方法仅适用于相邻窗体区域。对于独立窗体区域会不发生任何操作。</span><span class="sxs-lookup"><span data-stu-id="f28fc-p125">The <b>Reflow</b> method only applies to adjoining form regions. No action occurs for separate form regions.</span></span></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public void Select ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Select() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Outlook._FormRegion.Select" />
      <MemberSignature Language="VB.NET" Value="Public Sub Select ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Select();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(8457)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f28fc-160">激活该窗体区域，使其变得可见。</span><span class="sxs-lookup"><span data-stu-id="f28fc-160">Makes the form region the active form region such that it becomes visible.</span></span></summary>
        <remarks><para><span data-ttu-id="f28fc-p126">如果该窗体区域是相邻窗体区域，然后 <b>选择</b> 将展开该窗体区域 (如果它尚未展开的话) 并将焦点设在该页面上的第一个控件。如果该窗体区域是独立窗体区域，而且是不活动的页面，然后 <b>选择</b> 将切换到窗体区域页面，并将焦点设在该页面上的第一个控件。如果窗体区域是独立窗体区域，并且已经是活动的页面，则没有任何变化。</span><span class="sxs-lookup"><span data-stu-id="f28fc-p126">If the form region is an adjoining form region, then <b>Select</b> will expand the form region (if it is not already expanded) and set focus on the first control on that page. If the form region is a separate form region and is not already the active page, then <b>Select</b> will swtich to the form region page and set focus on the first control on that page. If the form region is a separate form region and is already the active page, then nothing happens.</span></span></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Session">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Outlook.NameSpace Session { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Outlook.NameSpace Session" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Outlook._FormRegion.Session" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Session As NameSpace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Outlook::NameSpace ^ Session { Microsoft::Office::Interop::Outlook::NameSpace ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(61451)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(61451)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Outlook.NameSpace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f28fc-164">返回<see cref="T:Microsoft.Office.Interop.Outlook.NameSpace" />对象的当前会话。</span><span class="sxs-lookup"><span data-stu-id="f28fc-164">Returns the <see cref="T:Microsoft.Office.Interop.Outlook.NameSpace" />  object for the current session.</span></span> <span data-ttu-id="f28fc-165">此为只读属性。</span><span class="sxs-lookup"><span data-stu-id="f28fc-165">Read-only.</span></span></summary>
        <value>To be added.</value>
        <remarks><para><span data-ttu-id="f28fc-166"><b>Session</b>属性和<see cref="M:Microsoft.Office.Interop.Outlook._Application.GetNamespace(System.String)" />可以交替使用方法来获取当前会话的<b>NameSpace</b>对象。</span><span class="sxs-lookup"><span data-stu-id="f28fc-166">The <b>Session</b> property and the <see cref="M:Microsoft.Office.Interop.Outlook._Application.GetNamespace(System.String)" /> method can be used interchangeably to obtain the <b>NameSpace</b> object for the current session.</span></span> <span data-ttu-id="f28fc-167">这两个成员可以实现同一目的。</span><span class="sxs-lookup"><span data-stu-id="f28fc-167">Both members serve the same purpose.</span></span> <span data-ttu-id="f28fc-168">例如，以下语句对执行相同的功能：</span><span class="sxs-lookup"><span data-stu-id="f28fc-168">For example, the following pairs of statements perform the same function:</span></span></para>
          <code>Dim objNamespace As Outlook.NameSpace = _
    Application.GetNamespace("MAPI")</code>
          <code>Dim objSession As Outlook.NameSpace = Application.Session</code>
          <code>Outlook.NameSpace objNamespace = 
    Application.GetNamespace("MAPI");</code>
          <code>Outlook.NameSpace objSession = Application.Session;</code>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SetControlItemProperty">
      <MemberSignature Language="C#" Value="public void SetControlItemProperty (object Control, string PropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetControlItemProperty([in]object Control, [in]string PropertyName) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Outlook._FormRegion.SetControlItemProperty(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetControlItemProperty (Control As Object, PropertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetControlItemProperty(System::Object ^ Control, System::String ^ PropertyName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(64201)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Control" Type="System.Object" />
        <Parameter Name="PropertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Control"><span data-ttu-id="f28fc-169">指属性指定的窗体区域中的控件<paramref name="PropertyName" />将绑定。</span><span class="sxs-lookup"><span data-stu-id="f28fc-169">A control in the form region to which the property specified by <paramref name="PropertyName" /> will be bound.</span></span></param>
        <param name="PropertyName"><span data-ttu-id="f28fc-170">将要绑定到控件的属性名称。</span><span class="sxs-lookup"><span data-stu-id="f28fc-170">The name of the property that will be bound to the control.</span></span></param>
        <summary><span data-ttu-id="f28fc-171">将显式的内置属性或自定义属性绑定到窗体区域中的控件。</span><span class="sxs-lookup"><span data-stu-id="f28fc-171">Binds an explicit  built-in property or a custom property to a control in the form region.</span></span></summary>
        <remarks><para><span data-ttu-id="f28fc-p129">此方法可用于绑定到控件的显式内置属性或自定义属性。您必须引用的属性的字符串的名称，例如，为 <b>主题</b> ，而不是命名空间，例如，http://schemas.microsoft.com/mapi/proptag/0x0037001E。</span><span class="sxs-lookup"><span data-stu-id="f28fc-p129">You can use this method to bind an explicit built-in property or a custom property to a control. You must reference the property by its string name, for example, <b>Subject</b>, and not by namespace, for example, http://schemas.microsoft.com/mapi/proptag/0x0037001E.</span></span></para>
          <para><span data-ttu-id="f28fc-174"><paramref name="PropertyName" />参数不区分大小写。</span><span class="sxs-lookup"><span data-stu-id="f28fc-174">The <paramref name="PropertyName" /> parameter is not case-sensitive.</span></span> <span data-ttu-id="f28fc-175">例如， <b>SetControlItemProperty</b>解释参数， <b>customerid</b>，为<b>CustomerID</b>相同，并将指定的控件绑定到内置<see cref="P:Microsoft.Office.Interop.Outlook._ContactItem.CustomerID" />属性。</span><span class="sxs-lookup"><span data-stu-id="f28fc-175">For example, <b>SetControlItemProperty</b> interprets an argument, <b>CustomerId</b>, to be the same as <b>CustomerID</b> and binds the specified control to the built-in <see cref="P:Microsoft.Office.Interop.Outlook._ContactItem.CustomerID" /> property.</span></span></para>
          <para><span data-ttu-id="f28fc-176">除了使用的<b>SetControlItemProperty</b>方法<see cref="T:Microsoft.Office.Interop.Outlook.FormRegion" />对象，您还可以使用类似于以下的代码将如<b>Subject</b>属性的某个属性绑定到控件：</span><span class="sxs-lookup"><span data-stu-id="f28fc-176">Other than using the <b>SetControlItemProperty</b> method of a <see cref="T:Microsoft.Office.Interop.Outlook.FormRegion" /> object, you can also use code similar to the following to bind a property such as the  <b>Subject</b> property to a control:</span></span></para>
          <code>myPage.Controls("bar").ItemProperty = "subject"</code>
          <code>myPage.Controls("bar").ItemProperty = "subject";</code>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SuppressControlReplacement">
      <MemberSignature Language="C#" Value="public bool SuppressControlReplacement { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SuppressControlReplacement" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Outlook._FormRegion.SuppressControlReplacement" />
      <MemberSignature Language="VB.NET" Value="Public Property SuppressControlReplacement As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SuppressControlReplacement { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(64518)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(64518)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(64518)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f28fc-177">返回或设置一个<b>布尔</b>(C# 中<b>bool</b> ) 的禁用 Outlook 从在设计时和运行时自动替换由应用了主题的 Outlook 控件 Forms 2.0 控件。</span><span class="sxs-lookup"><span data-stu-id="f28fc-177">Returns or sets a <b>Boolean</b> (<b>bool</b> in C#) that disables Outlook from automatically replacing  a Forms 2.0 control by  a themed Outlook control at design time and runtime.</span></span> <span data-ttu-id="f28fc-178">读/写。</span><span class="sxs-lookup"><span data-stu-id="f28fc-178">Read/write.</span></span></summary>
        <value>To be added.</value>
        <remarks><para><span data-ttu-id="f28fc-179">在 Outlook 自动替换 Forms 2.0 控件通过应用了主题的 Outlook 相应控件的详细信息，请参阅<a href="http://go.microsoft.com/fwlink/?LinkId=87823">自定义窗体中的控件</a></span><span class="sxs-lookup"><span data-stu-id="f28fc-179">For more information on Outlook automatically replacing a Forms 2.0 control by  a themed Outlook counterpart control, see <a href="http://go.microsoft.com/fwlink/?LinkId=87823">Controls in a Custom Form</a></span></span></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Visible">
      <MemberSignature Language="C#" Value="public bool Visible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Visible" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Outlook._FormRegion.Visible" />
      <MemberSignature Language="VB.NET" Value="Public Property Visible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Visible { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(8451)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(8451)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(8451)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f28fc-180">返回或设置<see cref="T:System.Boolean" />(<b>bool</b>的 C#) 值，该值指示窗体区域是可见还是隐藏。</span><span class="sxs-lookup"><span data-stu-id="f28fc-180">Returns or sets a <see cref="T:System.Boolean" /> (<b>bool</b> for C#) value that indicates whether the form region is visible or hidden.</span></span> <span data-ttu-id="f28fc-181">读/写。</span><span class="sxs-lookup"><span data-stu-id="f28fc-181">Read/write.</span></span></summary>
        <value>To be added.</value>
        <remarks><para><span data-ttu-id="f28fc-p133">
            <b>如此</b> 可见，则该窗体区域是否 <b>假</b> 如果它处于隐藏状态。默认值为 <b>True</b> 。</span><span class="sxs-lookup"><span data-stu-id="f28fc-p133">
            <b>True</b> if the form region is visible; <b>False</b> if it is hidden. The default is <b>True</b>. </span></span></para>
          <para><span data-ttu-id="f28fc-184">使用 <b>Visible</b> 属性来控制对信息的访问，但不显示该窗体区域中。</span><span class="sxs-lookup"><span data-stu-id="f28fc-184">Use the <b>Visible</b> property to control access to information without displaying it in a form region.</span></span></para>
          <para> </para></remarks>
      </Docs>
    </Member>
  </Members>
</Type>
